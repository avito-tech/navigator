/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/avito-tech/navigator/pkg/apis/navigator/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NexusLister helps list Nexuses.
type NexusLister interface {
	// List lists all Nexuses in the indexer.
	List(selector labels.Selector) (ret []*v1.Nexus, err error)
	// Nexuses returns an object that can list and get Nexuses.
	Nexuses(namespace string) NexusNamespaceLister
	NexusListerExpansion
}

// nexusLister implements the NexusLister interface.
type nexusLister struct {
	indexer cache.Indexer
}

// NewNexusLister returns a new NexusLister.
func NewNexusLister(indexer cache.Indexer) NexusLister {
	return &nexusLister{indexer: indexer}
}

// List lists all Nexuses in the indexer.
func (s *nexusLister) List(selector labels.Selector) (ret []*v1.Nexus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Nexus))
	})
	return ret, err
}

// Nexuses returns an object that can list and get Nexuses.
func (s *nexusLister) Nexuses(namespace string) NexusNamespaceLister {
	return nexusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NexusNamespaceLister helps list and get Nexuses.
type NexusNamespaceLister interface {
	// List lists all Nexuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Nexus, err error)
	// Get retrieves the Nexus from the indexer for a given namespace and name.
	Get(name string) (*v1.Nexus, error)
	NexusNamespaceListerExpansion
}

// nexusNamespaceLister implements the NexusNamespaceLister
// interface.
type nexusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Nexuses in the indexer for a given namespace.
func (s nexusNamespaceLister) List(selector labels.Selector) (ret []*v1.Nexus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Nexus))
	})
	return ret, err
}

// Get retrieves the Nexus from the indexer for a given namespace and name.
func (s nexusNamespaceLister) Get(name string) (*v1.Nexus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nexus"), name)
	}
	return obj.(*v1.Nexus), nil
}
